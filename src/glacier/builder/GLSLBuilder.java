package glacier.builder;

import glacier.builder.cdefinitions.AttributeDef;
import glacier.builder.cdefinitions.Definition;
import glacier.builder.cdefinitions.AttributeDef.AttributeType;
import glacier.builder.cdefinitions.Function;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import antlr4.GlacierParser.ArgumentsContext;

public class GLSLBuilder {
	ArrayList<Definition> fragComponents;
	FileWriter vertFile;
	FileWriter fragFile;
	final String NL = "\n";
	boolean vert = true;

	StringBuilder inBlock;
	StringBuilder uniformBlock;
	StringBuilder outBlock;
	StringBuilder functionBlock;

	String name, directory;

	private void addComment(FileWriter wr) throws IOException {
		wr.write("// Generated by glAcier" + NL + "#version 300 es" + NL + "precision mediump float;" + NL);
	}

	private void refreshBlocks() {
		if (vert) {
			inBlock = new StringBuilder("// Attributes\n");
			uniformBlock = new StringBuilder("// Uniforms\n");
			outBlock = new StringBuilder("// Varying\n");
			
		} else {
			inBlock = new StringBuilder("// Varying\n");
			uniformBlock = new StringBuilder("// Uniforms\n");
			outBlock = new StringBuilder("// RenderTargets\n");
		}
		functionBlock = new StringBuilder("// Functions\n");
	}

	public void build(String directory, String name, ArrayList<Definition> vcomponents, ArrayList<Definition> fcomponents, ArrayList<Function> vfuncs, ArrayList<Function> ffuncs) throws IOException {
		this.name = name;
		this.directory = directory;
		refreshBlocks();
		buildVert(vcomponents, fcomponents, vfuncs);
		vert = false;
		refreshBlocks();
		buildFrag(fcomponents, ffuncs);
	}

	public void buildVert(ArrayList<Definition> components, ArrayList<Definition> fcomponents, ArrayList<Function> vfuncs) throws IOException {
		vertFile = new FileWriter(directory + "android/assets/shaders/" + name + ".vert.glsl");
		addComment(vertFile);
		for (Definition c : components) {
			inBlock.append(c.generateShaderInDef());
			uniformBlock.append(c.generateShaderUniDef());
			outBlock.append(c.generateShaderOutDef());
			if (c.generateShaderOutDef().length() > 0) {
				fcomponents.add(new AttributeDef(c.getName(), AttributeType.INFRAG));
			}
		}
		for( Function f : vfuncs) {
			functionBlock.append(f.print() + "\n");
		}
		inBlock.append("\n");
		uniformBlock.append("\n");
		outBlock.append("\n");
		functionBlock.append("\n");
		vertFile.write(inBlock.toString() + uniformBlock.toString() + outBlock.toString() + functionBlock.toString());
		vertFile.close();
	}

	public void buildFrag(ArrayList<Definition> components, ArrayList<Function> ffuncs) throws IOException {
		fragFile = new FileWriter(directory + "android/assets/shaders/" + name + ".frag.glsl");
		addComment(fragFile);
		for (Definition c : components) {
			inBlock.append(c.generateShaderInDef());
			uniformBlock.append(c.generateShaderUniDef());
			outBlock.append(c.generateShaderOutDef());
		}
		for( Function f : ffuncs) {
			functionBlock.append(f.print() + "\n");
		}
		System.out.println("outblock: <" + outBlock + ">");
		if (outBlock.length() < 18) {
			outBlock.append("out vec4 default;");
		}
		inBlock.append("\n");
		uniformBlock.append("\n");
		outBlock.append("\n");
		functionBlock.append("\n");
		fragFile.write(inBlock.toString() + uniformBlock.toString() + outBlock.toString() + functionBlock.toString());
		fragFile.close();
		fragFile.close();
	}

}
