package glacier.shaders;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Pixmap.Format;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g3d.Renderable;
import com.badlogic.gdx.graphics.g3d.Shader;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
import com.badlogic.gdx.graphics.glutils.ShaderProgram;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.GdxRuntimeException;

/**
 * Implements the CPU side of the GBuffer Shader
 */
public class <shadername>Shader implements Shader {
	// Mandatory Members
	ShaderProgram program;
	Camera camera;
	RenderContext context;
	String vert; 
	String frag;
	// Matrix and Uniform Locations
	<otherMembersBlock>;
	
	public <shadername>Shader(String vert, String frag) {
		this.vert = vert;
		this.frag = frag;
	}
	
	@Override
	public void init() {
		// Create new Program from loaded shaders
		program = new ShaderProgram(vert, frag);
		// Check if the program compiled correctly
		if (!program.isCompiled()) {
			throw new GdxRuntimeException(program.getLog());
		} else {
			System.out.println("Shader compiled correctly. Appending log(" + program.getLog().length() + "):\n" + program.getLog());
		}
		
		// Get the Locations
		<getLocationsBlock>;
		<initBlock>;
	}
	@Override
	public void begin(Camera camera, RenderContext context) {
		this.camera = camera;
		this.context = context;
		program.begin();
		<setBlockUniforms>;
		<contextOptions>;
	}
	
	@Override
	public void render(Renderable renderable) {
		// Per Instance instructions
		<instanceBlock>;
		renderable.mesh.render(program,
				renderable.primitiveType,
				renderable.meshPartOffset,
				renderable.meshPartSize);
	}

	@Override
	public void end() {
		program.end();
	}
	@Override
	public int compareTo(Shader other) {
		return 0;
	}
	@Override
	public boolean canRender(Renderable renderable) {
		return true;
	}
	@Override
	public void dispose() {
		program.dispose();
	}
}