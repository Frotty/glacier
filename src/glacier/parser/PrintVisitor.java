package glacier.parser;

import java.util.ArrayList;
import java.util.Collection;

import org.antlr.v4.runtime.ParserRuleContext;

import glacier.parser.ShortcutManager.Shortcut;
import antlr4.GlacierBaseVisitor;
import antlr4.GlacierParser.ExprContext;
import antlr4.GlacierParser.ExprFunctionCallContext;
import antlr4.GlacierParser.ExprListContext;
import antlr4.GlacierParser.ExprMemberVarContext;
import antlr4.GlacierParser.ExprPrimaryContext;
import antlr4.GlacierParser.ExprVarAccessContext;
import antlr4.GlacierParser.FragmentShaderContext;
import antlr4.GlacierParser.InBlockContext;
import antlr4.GlacierParser.LocalVarDefContext;
import antlr4.GlacierParser.MatricesBlockContext;
import antlr4.GlacierParser.OutBlockContext;
import antlr4.GlacierParser.ShaderBlockContext;
import antlr4.GlacierParser.StatementContext;
import antlr4.GlacierParser.StatementsBlockContext;
import antlr4.GlacierParser.StmtSetContext;
import antlr4.GlacierParser.UniformsBlockContext;
import antlr4.GlacierParser.VarDefContext;
import antlr4.GlacierParser.VertexShaderContext;

public class PrintVisitor extends GlacierBaseVisitor<String> {
	boolean isFragment = false;
	private String indentLvl = "";
	private StringBuilder sb = new StringBuilder();
	private ShortcutManager scman = new ShortcutManager();
	private ArrayList<String> outVars = new ArrayList<>();

	public PrintVisitor(ArrayList<String> vertexVarying) {
		scman.loadDefaultShortcuts();
		this.isFragment = vertexVarying != null;
		print("// Generated by glAcier\n#version 300 es\nprecision mediump float;\n\n");
		if(isFragment) {
			for(String s : vertexVarying) {
				print("in " + s);
				newline();
			}
		}
	}

	public String out() {
		return sb.toString();
	}

	private void print(String text) {
		sb.append(text);
	}

	private void increaseIndent() {
		indentLvl += "\t";
	}

	private void decreaseIndent() {
		indentLvl.substring(0, indentLvl.length() - 1);
	}

	private void removeLastChars(int chars) {
		sb.setLength(sb.length() - chars);
	}

	private void newline() {
		sb.append("\n");
		sb.append(indentLvl);
	}

	private void resolveIEDirective(String directive) {
		switch (directive) {
		case "in":
			if (isFragment) {
				print("v_");
			} else {
				print("a_");
			}
			break;
		case "out":
			if (isFragment) {
				print("rt_");
			} else {
				print("v_");
			}
			break;
		case "mats":
			print("m_");
			break;
		case "uni":
			print("u_");
			break;
		default:
			break;
		}
	}

	private String resolveIEDShortcut(VarDefContext ctx, String prefix) {
		if (ctx.varType == null) {
			// Check for shortcuts
			Shortcut sc = scman.getIEDShortcut(ctx.varName.getText());
			if (sc != null) {
				// It's a shortcut
				print(sc.type + " " + prefix + sc.name + ";");
			} else {
				System.out.println("Error");
			}
		} else {
			print(ctx.varType.getText() + " " + ctx.varName.getText() + ";");
		}
		return "";
	}

	public void visitInVarDef(VarDefContext ctx) {
		// Geometry-Input
		print("in ");
		resolveIEDShortcut(ctx, "a_");
	}

	public void visitUniformDef(VarDefContext ctx) {
		// Uniforms
		print("uniform " + ctx.varType.getText() + " u_" + ctx.varName.getText() + ";");
	}

	public void visitOutVarDef(VarDefContext ctx, boolean frag) {
		if (frag) {
			// Fragment-Shader Rendertarget
			print("out vec4 rt_" + ctx.varName.getText() + ";");
		} else {
			// Varying in Vertex
			print("out " + ctx.varType.getText() + " v_" + ctx.varName.getText() + ";");
			outVars.add(ctx.varType.getText() +  " v_" + ctx.varName.getText() + ";");
		}
	}

	@Override
	public String visitVarDef(VarDefContext ctx) {
		// Check The Block-Type
		ParserRuleContext parent = ctx.getParent().getParent();
		boolean frag = parent.getParent().getParent() instanceof FragmentShaderContext;
		if (parent instanceof InBlockContext) {
			visitInVarDef(ctx);
		} else if (parent instanceof OutBlockContext) {
			visitOutVarDef(ctx, frag);
		} else if (parent instanceof UniformsBlockContext) {
			visitUniformDef(ctx);
		}
		newline();
		return "";
	}

	@Override
	public String visitExprFunctionCall(ExprFunctionCallContext funcCall) {
		System.out.println("called: " + funcCall.funcName.getText());
		Shortcut sc = scman.getFuncShortcut(funcCall.funcName.getText());
		if (sc != null) {
			print(sc.name + "(");
		} else {
			print(funcCall.funcName.getText() + "(");

		}
		visit(funcCall.params);
		print(")");
		return "";
	}

	@Override
	public String visitExprList(ExprListContext exprList) {
		for (ExprContext expr : exprList.exprs) {
			visit(expr);
			print(", ");
		}
		removeLastChars(2);
		return "";
	}

	@Override
	public String visitExprPrimary(ExprPrimaryContext expr) {
		if (expr.funcCall != null) {
			visit(expr.funcCall);
		} else if (expr.varname != null) {
			if(expr.varname.getText().charAt(1) == '_') {
				print(expr.varname.getText());
			} else {
				print("l_" + expr.varname.getText());
			}
		} else if (expr.atom != null) {
			print(expr.atom.getText());
		}
		return "";
	}
	

	@Override
	public String visitExpr(ExprContext expr) {
		System.out.println("expr<<<<<<<" + expr.getText());
		if (expr.left != null) {
			System.out.println("expr1<<<<<<<" + expr.left.getText());
			visit(expr.left);
			print(" " + expr.op.getText() + " ");
			visit(expr.right);
		} else if (expr.funcName != null) {
			System.out.println("expr2<<<<<<<" + expr.funcName.getText());
			print(expr.funcName.getText() + "( ");
			visit(expr.params);
			print(")");
		} else if (expr.primary != null) {
			System.out.println("expr3<<<<<<<" + expr.primary.getText());
			visit(expr.primary);
		} else if (expr.receiver != null) {
			System.out.println("expr4<<<<<<<" + expr.receiver.getText());
			visit(expr.receiver);
			if(expr.dotsVar != null) {
				print("." + expr.varName.getText());
			}
		} else if (expr.ieD != null) {
			resolveIEDirective(expr.ieD.getText());
			Shortcut sc = scman.getIEDShortcut(expr.varName.getText());
			if (sc != null && ! expr.ieD.getText().equals("mats") && ! isFragment) {
				print(sc.name);
			} else {
				sc = scman.getMatShortcut(expr.varName.getText());
				if (sc != null) {
					print(sc.name);
				} else {
					print(expr.varName.getText());
				}
			}
		}
		return "";
	}

	@Override
	public String visitInBlock(InBlockContext ctx) {
		for (VarDefContext def : ctx.inArgs.vardefs) {
			visit(def);
		}
		return "";
	}

	@Override
	public String visitMatricesBlock(MatricesBlockContext ctx) {
		for (VarDefContext def : ctx.matsArgs.vardefs) {
			Shortcut sc = scman.getMatShortcut(def.varName.getText());
			print("uniform " + sc.type + " m_" + sc.name + ";");
			newline();
		}
		return "";
	}

	@Override
	public String visitOutBlock(OutBlockContext ctx) {
		for (VarDefContext def : ctx.outArgs.vardefs) {
			visit(def);
		}
		return "";
	}

	@Override
	public String visitUniformsBlock(UniformsBlockContext ctx) {
		for (VarDefContext def : ctx.uniformArgs.vardefs) {
			visit(def);
		}
		return "";
	}

	@Override
	public String visitStmtSet(StmtSetContext stmt) {
		visit(stmt.left);
		print(" " + stmt.assignOp.getText() + " ");
		visit(stmt.right);
		print(";");
		newline();
		return "";
	}

	@Override
	public String visitExprMemberVar(ExprMemberVarContext expr) {
		if (expr.ieDirect != null) {
			resolveIEDirective(expr.ieDirect.getText());
			Shortcut sc = scman.getIEDShortcut(expr.varname.getText());
			Shortcut msc = scman.getMatShortcut(expr.varname.getText());
			if(isFragment && expr.ieDirect.getText().equals("in")) {
				print(expr.varname.getText());
			} else if (expr.ieDirect.getText().equals("out")) {
				print(expr.varname.getText());
			} else if (expr.ieDirect.getText().equals("mats")) {
				print(msc.name);
			} else if (sc != null) {
				print(sc.name);
			} else {
				print(expr.varname.getText());
			}
		}
		return "";
	}

	@Override
	public String visitExprVarAccess(ExprVarAccessContext expr) {
		Shortcut sc = scman.getIEDShortcut(expr.varname.getText());
		Shortcut msc = scman.getMatShortcut(expr.varname.getText());
		if (sc != null) {
			print(sc.name);
		} else if (expr.varname.getText().equals("gl_Pos")) {
			print("gl_Position");
		} else if (msc != null) {
			print(msc.name);
		} else {
			print(expr.varname.getText());
		}
		return "";
	}

	@Override
	public String visitLocalVarDef(LocalVarDefContext ldef) {
		print(ldef.typeName.getText() + " l_" + ldef.name.getText());
		// Has initial expression?
		if (ldef.initial != null) {
			print(" = ");
			visit(ldef.initial);
			print(";");
			newline();
		} else {
			print(";");
			newline();
		}
		return "";
	}

	@Override
	public String visitShaderBlock(ShaderBlockContext ctx) {
		if (ctx.inBlock() != null) {
			visit(ctx.inBlock());
		}
		newline();
		if (ctx.outBlock() != null) {
			visit(ctx.outBlock());
		}
		newline();
		if (ctx.matricesBlock() != null) {
			visit(ctx.matricesBlock());
		}
		newline();
		if (ctx.uniformsBlock() != null) {
			visit(ctx.uniformsBlock());
		}
		newline();
		if (ctx.mainFunc != null) {
			print("void main() {");
			increaseIndent();
			newline();
			visit(ctx.mainFunc);
			decreaseIndent();
			print("}");
		}
		return "";
	}

	public ArrayList<String> outVars() {
		return outVars ;
	}
}
